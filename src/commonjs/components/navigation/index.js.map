{"version":3,"sources":["index.js"],"names":["Dimensions","get","width","height","Navigator","props","popUpScreen","setPopUpScreen","background","Animated","Value","backgroundRef","popupRef","React","createRef","pages","initPage","find","page","init","scale","current","interpolate","inputRange","outputRange","extrapolate","border","animateBackground","value","spring","toValue","tension","friction","useNativeDriver","start","present","name","params","presentPage","dismiss","snapTo","renderInitPage","createElement","screen","renderPopUp","p","renderContent","flex","position","top","left","snapPoints","popupStyle","backgroundColor","overflow","transform","borderRadius"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { View, Dimensions, Animated, Alert, StatusBar } from 'react-native'\nimport PopUp from './pop_up'\n\nconst { width, height } = Dimensions.get('window')\n\nconst Navigator = (props) => {\n  const [popUpScreen, setPopUpScreen] = useState(null)\n  const background = new Animated.Value(0)\n  const backgroundRef = useRef(background)\n  let popupRef = useRef(React.createRef())\n\n  const { pages } = props\n  const initPage = pages.find(page => page.init) || pages[0]\n\n  const scale = backgroundRef.current.interpolate({\n    inputRange: [0, 1],\n    outputRange: [1, 0.9],\n    extrapolate: 'clamp'\n  })\n\n  const border = backgroundRef.current.interpolate({\n    inputRange: [0, 1],\n    outputRange: [0, 12],\n    extrapolate: 'clamp',\n  })\n\n  const animateBackground = (value) => {\n    Animated.spring(backgroundRef.current, {\n      toValue: 1,\n      tension: 68,\n      friction: 12,\n      toValue: value,\n      useNativeDriver: true\n    }).start()\n  }\n\n  useEffect(() => {\n    if (popUpScreen != null) {\n      animateBackground(1)\n    } else {\n      animateBackground(0)\n    }\n  }, [popUpScreen])\n\n  present = (name, params = {}) => {\n    const presentPage = pages.find(page => page.name === name)\n    setPopUpScreen({ name: presentPage.name, props: { ...presentPage.props, ...params } })\n  }\n\n  dismiss = () => {\n    popupRef.current.snapTo(height)\n    setPopUpScreen(null)\n  }\n\n  renderInitPage = () => {\n    return React.createElement(initPage.screen, { ...initPage.props, present, dismiss })\n  }\n\n  renderPopUp = () => {\n    if (!popUpScreen) {\n     return null \n    }\n\n    const page = pages.find(p => p.name === popUpScreen.name)\n\n    const renderContent = () => {\n      return React.createElement(page.screen, { ...popUpScreen.props, dismiss })\n    }\n\n    return (\n      <View style={[{ flex: 1, position: 'absolute', top: 0, left: 0 }]}>\n        <StatusBar backgroundColor={'#000'} animated barStyle=\"light-content\" />\n        <PopUp\n          ref={popupRef}\n          snapPoints={page.snapPoints || [50, height]}\n          renderContent={renderContent}\n          dismiss={dismiss}\n          scrollStyle={page.popupStyle}\n        />\n      </View>\n    )\n  }\n\n  return (\n    <View style={{ width, height, backgroundColor: '#000' }}>\n      <StatusBar backgroundColor={'#fff'} animated barStyle=\"dark-content\" />\n      <Animated.View \n        style={{ \n          width, \n          height, \n          overflow: 'hidden',\n          transform: [{ scale }],\n          backgroundColor: '#fff',\n          borderRadius: border\n        }}\n      >\n        {renderInitPage()}\n      </Animated.View>\n      {renderPopUp()}\n    </View>\n  )\n}\n\nexport default Navigator"]}